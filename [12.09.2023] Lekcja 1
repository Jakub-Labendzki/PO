git for windows

            long
            byte
            sbyte
            short
            int
            uint


--------------------------------------------

byte b = 255;//0-255
sbyte sb = -128;//-128 - 127
short s = -32768;//-32768 - 32768
int in_1 = -2147483648;//-2 147 483 648 - 2 147 483 648
/*
byte (8 bitów => 1 bajt)            | 0                              -      255
sbyte (8 bitów => 1 bajt)           | -128                           -      127
short (16 bitów => 2 bajty)         | -32768                         -      32767
ushort (16 bitów => 2 bajty)        | 0                              -      65535
int (32 bitów => 4 bajty)           | -2 147 483 648                 -      2 147 483 647
uint (32 bitów => 4 bajty)          | 0                              -      4 294 967 295
long (64 bitów => 8 bajtów)         | -9 223 372 036 854 775 808     -      9 223 372 036 854 775 807      |Sufix L
ulong (64 bity => 8 bajtów)         | 0                              -      18 446 744 073 709 551 615     |Sufix UL
bool                                | true                           -      false
char (16 bitów => 2 bajty, znak z tablicy Unicode)         |  U+0000 -      U+FFFF 
srting ?
float (32 bity)                     | -3.4 x 10^38                   -      3.4 x 10^38 
double (64 bity)
decimal (128 bitów)
*/

long l = 69;
ulong ul = 69UL;
Console.WriteLine("Zmienna l: {0}, zmienna ul:{1}", l, ul);

float f = 10.5F;
Console.WriteLine("Zmienna f wynosi: " + f);//10,5

float f1 = 10;
Console.WriteLine(f1);//10

Console.WriteLine("Ilość batów w pamięci typu float: " + sizeof(float));//4 bajty
Console.WriteLine("Ilość batów w pamięci typu bool: " + sizeof(bool));//1 bajt
Console.WriteLine("Ilość batów w pamięci typu int: " + sizeof(int));//4 bajty

//zapis systemów liczbowych
//binarnych
Console.WriteLine(0b1010); //10
//oktalnych
int i2 = Convert.ToInt32("12", 8);
Console.WriteLine("Zamiana liczby oktalnej na dziesiętną" + 012); //12(8) => 1x8^1 + 2x8^0
//heksadecymalnych
Console.WriteLine(0xA); //10
//dziesiętny
Console.WriteLine(69); //69

// Zakres typów danych
Console.WriteLine($"{byte.MinValue} - {byte.MaxValue}"); //0 -255
Console.WriteLine($"{sbyte.MinValue} - {sbyte.MaxValue}"); //-128 - 127
Console.WriteLine($"{int.MinValue} - {Int32.MaxValue} - {System.Int32.MinValue}"); //-2 147 483 648 - -2 147 483 648

Console.ReadKey();

//Unicode
Console.OutputEncoding = System.Text.Encoding.Unicode;  
Console.WriteLine("☺");
Console.WriteLine("\x2665");

char letter = 'A';
Console.WriteLine(letter);

char letter2 = (char)97;
Console.WriteLine(letter2);

-----------------------------------------------------

Console.Write("Podaj bok a: ");
double a = double.Parse(Console.ReadLine());
Console.Write("Podaj bok b: ");
double b = double.Parse(Console.ReadLine());
Console.Write("Podaj bok c: ");
double c = double.Parse(Console.ReadLine());
double p = (a + b + c) / 2;
double heron = Math.Sqrt(p * (p - a) * (p - b) * (p - c));
Console.WriteLine(heron);



Console.Write("Podaj bok a: ");
double a;
if (double.TryParse(Console.ReadLine(), out a))
{
    Console.WriteLine(a);
}
else
{
    Console.WriteLine("Błędne dane podane przez użytkownika!");
}





------------------------------------------------------------------

            string input;
            do
            {
                Console.Write("Podaj liczbę całkowitą albo 0 aby wyjść z programu:");
                input = Console.ReadLine();
                if (input == "q")
                {
                    break;
                }
                try
                {
                    int number = int.Parse(input);
                    number = int.Parse(Console.ReadLine());
                    if (number < 0)
                    {
                        throw new ArgumentOutOfRangeException("Liczba nie może buć ujemna");
                    }
                    if (number > 0)
                    {
                        double sqrt = Math.Sqrt(number);
                        Console.WriteLine($"\nPierwiastek z {number} wynosi {sqrt}\n\n");
                    }
                }
                catch (FormatException) 
                {
                    Console.WriteLine("Nieprawidłowe dane wejściowe, podaj liczbę całkowitą.");
                }
                catch (OverflowException)
                {
                    Console.WriteLine($"Przekroczono zzakres liczaby <{int.MinValue}> ; <{int.MaxValue}>");
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    Console.WriteLine($"Błąd: {ex.Message}");
                }
                catch (Exception e) 
                {
                    Console.WriteLine($"Inny błąd: {e.Message}");
                }
                finally
                {
                    Console.WriteLine("Dzieki mordo");
                }
            } 
            while (input == "q");





-------------------------------------------------------------------------
Definiowanie klas


using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] tabA = CreateArray("tabA");
            if (tabA != null) 
            {
                SetArray(tabA, "tabA");
                DisplayArray(tabA, "tabA");
            }
        }

        //funkcja statyczna, która pozwala wprowadzić rozmiar tablicy i nazwę (CreateArray)
        public static int[] CreateArray(string name)
        {
            Console.Write($"Podaj rozmiar tablicy <0 ; {int.MaxValue}>: ");
            int size = 0;
            try
            {
                size = int.Parse(Console.ReadLine());
                if (size <= 0) throw new ArgumentException("\nRozmiar tablicy musi być dodatni");
            }
            catch(Exception e)
            {
                Console.WriteLine("Wystąpił błąd: {0}", e.Message);
                return null;
            }
            int[] array = new int[size];
            return array;
        }

        //funkcja statyczna, która ustawia elementy tablicy
        public static void SetArray(int[] nameset, string name)
        {
            Console.WriteLine($"\nPodaj elementy tablicy {name}: ");
            for (int i = 0; i < nameset.Length; i++)
            {
                Console.Write($"Podaj elementy tablicy {i + 1}: ");
                try
                {
                    nameset[i] = int.Parse(Console.ReadLine());

                }
                catch (Exception e)
                {
                    Console.WriteLine("\nWystąpił błąd: {0}\n ", e.Message);
                    i--;
                }
            }
            
           
        }

        //funkcja statyczna, która wyświetla zawartość tablicy
        public static void DisplayArray(int[] array, string name)
        {
            Console.WriteLine($"\nWyświetlenie elementów zawartości");
            int i = 0;
            foreach (var element in array)
            {
                Console.WriteLine($"\n{name}[{i}]: {element}");
                i++;
            }
        }
    }
}
